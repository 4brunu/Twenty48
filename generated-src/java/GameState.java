// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from twenty_forty_eight.idl

package com.boloutaredoubeni.twentyfortyeight.djinni;

import java.util.concurrent.atomic.AtomicBoolean;

/** NOTE: just for design, will be deleted */
public abstract class GameState {
    public abstract short score();

    public abstract void draw();

    public abstract boolean win();

    private static final class CppProxy extends GameState
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public short score()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_score(this.nativeRef);
        }
        private native short native_score(long _nativeRef);

        @Override
        public void draw()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_draw(this.nativeRef);
        }
        private native void native_draw(long _nativeRef);

        @Override
        public boolean win()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_win(this.nativeRef);
        }
        private native boolean native_win(long _nativeRef);
    }
}
